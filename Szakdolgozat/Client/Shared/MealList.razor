@inject IMealService MealService
@implements IDisposable


@if(MealService.Meals == null || MealService.Meals.Count == 0)
{
    <span>@MealService.Message</span>
}
else
{
    <ul class="list-unstyled">
        @foreach (var meal in MealService.Meals)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/meal/@meal.Id">
                        <img class="media-img" src="@meal.ImageUrl" alt="@meal.Name" />
                    </a>
                </div>
                <div class="/meal/@meal.Id">
                    <a href="/meal/@meal.Id">
                        <h4 class="mb-0">@meal.Name</h4>
                    </a>
                    <p>@meal.Description</p>
                    <h5 class="price">
                        @GetPriceText(meal)
                    </h5>
                </div>
            </li>
        }
    </ul>
}




@code {


    protected override void OnInitialized()
    {
        MealService.MealsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        MealService.MealsChanged -= StateHasChanged;
    }


    private string GetPriceText(Meal meal)
    {
        var variants = meal.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            
            return (variants[0].OriginalPrice.ToString("0.##")) + " Ft.";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return  minPrice.ToString("0.##") + " Ft-tól kezdve.";
    }
}

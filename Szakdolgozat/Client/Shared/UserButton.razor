@inject ILocalStorageService  LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ICartService CartService


<div class="dropdown">
    <button @onclick="ToggleUserMenu"
            @onfocusout="HideUserMenu"
            
            class="btn btn-secondary dropdown-toggle user-button ">
        <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right  @UserMenuCssClass" style=" margin-left:  -40px ">
        <AuthorizeView>
            <Authorized>
                <a href="profile" class="dropdown-item">Profil</a>
                <a href="orders" class="dropdown-item">Rendelések</a>
                <hr/>
                <AdminMenu />
                <button class="dropdown-item" style="text-align:center; color:steelblue; font-weight:bold" @onclick="Logout">Kijelentkezés</button>
            </Authorized>
            <NotAuthorized>
                
                <a href="register" class="dropdown-item">Regisztráció</a>
                <a href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">Bejelentkezés</a>
            </NotAuthorized>
        </AuthorizeView>
        
    </div>
</div>
@code {
    private bool showUserMenu = false;
    private string UserMenuCssClass => showUserMenu ? "show-menu" :null;
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }
    private async Task HideUserMenu()
    {
        await Task.Delay(200); // its necessary to wait for the click event to fire
        showUserMenu = false;
    }

    private async  Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authtoken");
        //await CartService.GetCartMealsCount();
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");
    }
}

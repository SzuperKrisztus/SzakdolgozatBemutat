@page "/cart"
@inject ICartService CartService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IOrderService OrderService

<PageTitle>Kosár</PageTitle>

@if (cartMeals == null || cartMeals.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        <h3>Kosár</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Kép</th>
                    <th>Termék</th>
                    <th>Típus</th>
                    <th>Mennyiség</th>
                    <th>Ár</th>
                    <th>Törlés</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in cartMeals)
                {
                    <tr>
                        <td><img src="@product.ImageUrl" class="image" /></td>
                        <td><a href="/product/@product.MealId">@product.Name</a></td>
                        <td>@product.MealType</td>
                        <td>
                            <input type="number" value="@product.Quantity" @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))" class="form-control input-quantity" min="1" />
                        </td>
                        <td>@((product.Price * product.Quantity).ToString("0.##")) Ft.</td>
                        <td>
                            <button type="button" class="btn btn-danger" style="color-sc" @onclick="@(() => RemoveMealFromCart(product.MealId, product.MealTypeId))">
                                <i class="oi oi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="cart-product-price">
            Összesen (@cartMeals.Sum(product => product.Quantity)): @cartMeals.Sum(product => product.Price * product.Quantity).ToString("0.##") Ft.
        </div>
        <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Megrendelés</button>
    </div>
}
@code {
    List<CartMealResponseDTO> cartMeals = null;
    string message = "Kosár betöltése...";
    bool isAuthenticated = false;
    bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        orderPlaced = false;
        isAuthenticated = await AuthService.IsUserAuthenticated();
        await LoadCart();
    }

    private async Task RemoveMealFromCart(int mealId, int mealTypeId)
    {
        await CartService.RemoveMealFromCart(mealId, mealTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        //await CartService.GetCartMealsCount();
        cartMeals = await CartService.GetCartMeals();
        if (cartMeals == null || cartMeals.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartMealResponseDTO meal)
    {
        meal.Quantity = int.Parse(e.Value.ToString());
        if (meal.Quantity < 1)
            meal.Quantity = 1;
        await CartService.UpdateQuantity(meal);
    }

    private async Task PlaceOrder()
    {

        
        await OrderService.PlaceOrder();
        orderPlaced = true;
        await LoadCart(); 
        StateHasChanged(); 
    }

    
}

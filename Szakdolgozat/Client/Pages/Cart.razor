@page "/cart"
@inject ICartService CartService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IOrderService OrderService

<PageTitle>Kosár</PageTitle>

@if (cartMeals == null || cartMeals.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartMeals)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.MealId">@product.Name</a></h5>
                    <span>@product.MealType</span><br />
                    <input type="number" value="@product.Quantity"
                   @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                   class="form-control input-quantity"
                   min="1" />
                    <button class="btn-delete" @onclick="@(() =>
                        RemoveMealFromCart(product.MealId, product.MealTypeId))">
                        Törlés
                    </button>
                </div>
                <div class="cart-product-price">@(product.Price * product.Quantity) Ft.</div>
            </div>
        }
        <div class="cart-product-price">
            Összesen (@cartMeals.Sum(product => 1* product.Quantity)): @cartMeals.Sum(product => @product.Price * product.Quantity) Ft.
        </div>
    </div>

    <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Megrendelés</button>
}
@code {
        List<CartMealResponseDTO> cartMeals = null;
        string message = "Kosár betöltése...";
        bool isAuthenticated = false;
        bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        orderPlaced = false;
        isAuthenticated = await AuthService.IsUserAuthenticated();
        await LoadCart();
    }

    private async Task RemoveMealFromCart(int mealId, int mealTypeId)
    {
        await CartService.RemoveMealFromCart(mealId, mealTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        //await CartService.GetCartMealsCount();
        cartMeals = await CartService.GetCartMeals();
        if (cartMeals == null || cartMeals.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartMealResponseDTO meal)
    {
        meal.Quantity = int.Parse(e.Value.ToString());
        if (meal.Quantity < 1)
            meal.Quantity = 1;
        await CartService.UpdateQuantity(meal);
    }

    private async Task PlaceOrder()
    {
       
        await OrderService.PlaceOrder();
        //await CartService.GetCartMealsCount();
        orderPlaced = true;
    }

    
}

@page "/admin/order"
@inject IOrderService OrderService
@inject NavigationManager Navigation

<h3>Orders Overview</h3>

@if (orders == null)
{
    <span>Rendelések betöltése...</span>
}
else if (orders.Count <= 0)
{
    <span>Jelenleg nincsenek rendelések.</span>
}
else
{
    <div>
        @foreach (var order in orders)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@order.MealImageUrl" class="image" />
                </div>
                <div class="details">
                    <h4>@order.Meal</h4>
                    <span>@order.OrderDate</span><br />
                    <div class="order-price" style="font-size:19px">@order.TotalPrice.ToString("0.##") Ft.</div>
                    <div class="order-status" style="font-weight:bold">@order.Status</div>
                    <div style="margin-bottom : 10px">
                        <button class="status-button" @onclick="() => InPreparation(order.Id)">Készül</button>
                        <button class="status-button" @onclick=" () => WaitingForPayment(order.Id)">Fizetésre vár</button>
                        <button class="status-button" @onclick="() => Payed(order.Id)">Kifizetve</button>
                        <button type="button" class="btn btn-danger" style="color-sc" @onclick="@(() => DeleteOrder(order.Id))">
                            <i class="oi oi-trash"></i>
                        </button>
                    </div>

                    <a href="orders/@order.Id">Mutass többet...</a>
                </div>
            </div>
        }
    </div>
}
@code {

    List<OrderOverviewResponseDTO> orders = null;

    protected override async Task OnInitializedAsync()
    {

        orders = await OrderService.GetAdminOrders();
        StateHasChanged();
    }




    private async Task UpdateOrderStatus(int orderId, string newStatus)
    {
        var response = await OrderService.UpdateStatus(orderId, newStatus);
        if (response.Success)
        {
            // Frissítjük az oldalt, hogy a változások megjelenjenek
            orders = await OrderService.GetAdminOrders();
            StateHasChanged();
        }
        else
        {
            // Hibakezelés, ha a státusz frissítése nem sikerült
            Console.WriteLine($"Hiba történt a státusz frissítésekor: {response.Message}");
        }
    }

    private void InPreparation(int orderId)
    {
        UpdateOrderStatus(orderId, "Készül");
    }
    private void WaitingForPayment(int orderId)
    {
        UpdateOrderStatus(orderId, "Fizetésre vár");
    }
    private void Payed(int orderId)
    {
        UpdateOrderStatus(orderId, "Kifizetve");
    }



    async void DeleteOrder(int orderId)
    {
        await OrderService.DeleteOrder(orderId);
        orders = await OrderService.GetAdminOrders();
        StateHasChanged();
        
    }
}
@page "/admin/meals/"
@page "/admin/meal/{id:int}"
@inject IMealService MealService
@inject IMealTypeService MealTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (loading)
{
    <span>@msg</span>
}
else
{
    @if (meal.Editing)
    {
        <h3>Edit "@meal.Name"</h3>
    }
    else if (meal.IsNew)
    {
        <h3>Create a new Meal</h3>
    }

    <EditForm Model="meal" OnValidSubmit="AddOrUpdateMeal">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="meal.Name" class="form-control" required></InputText>
        </div>
        <div class="mb-0">
            <label for="name">ImageUrl</label>
            <InputText id="imageurl" @bind-Value="meal.ImageUrl" class="form-control" required></InputText>
        </div>
        <div class="mb-0">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="meal.Description" class="form-control" required></InputTextArea>
        </div>
        <div class="mb-0">
            <label for="allergen">Allergen</label>
            <InputTextArea id="allergen" @bind-Value="meal.Allergen" class="form-control" required></InputTextArea>
        </div>
        <hr />
        <div class="header">
            <div class="col">Meal Type / Variant</div>
            <div class="col">Price</div>
            <div class="col">Original Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>
        @foreach (var variant in meal.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect @bind-Value="variant.MealTypeId" class="form-control" required>
                        @foreach (var mealType in MealTypeService.MealTypes)
                        {
                            <option value="@mealType.Id">@mealType.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.Price" class="form-control" required></InputNumber>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" required></InputNumber>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="variant.Visible" style="transform:scale(1.5,1.5);" required></InputCheckbox>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-danger" @onclick="@(() => RemoveVariant(variant.MealTypeId))">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            </div>
        }
        <button type="button" class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus"></i> Add Variant
        </button>
        <hr />
        <div class="mb-0">
            <label for="category">Category</label>
            <InputSelect id="category" @bind-Value="meal.CategoryId" class="form-control" required>
                @foreach (var category in CategoryService.AdminCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
        <hr />
        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="meal.Visible" class="form-check-input" required></InputCheckbox>
            <label for="visible" class="form-check-label">Visible</label>
        </div>
        <hr />
        <button type="submit" class="btn btn-primary float-end" @onclick="AddOrUpdateMeal" disabled="@(!meal.Variants.Any(v => v.MealTypeId != null && v.MealTypeId != 0) || (meal.CategoryId == 0) || isProcessing)">
            @btnText
        </button>




        <ValidationSummary></ValidationSummary>
        <ValidationMessage For="@(() => meal.Variants)" />
    </EditForm>
    @if (!meal.IsNew)
    {
        <button type="button" class="btn btn-danger float-start" @onclick="DeleteMeal">
            Delete Meal
        </button>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }
    bool isProcessing = false;
    Meal meal = new Meal();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await MealTypeService.GetMealTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            meal = new Meal { IsNew = true };
            btnText = "Create Meal";
        }
        else
        {
            Meal dbMeal = (await MealService.GetMeal(Id)).Data;
            if (dbMeal == null)
            {
                msg = $"Meal with Id '{Id}' does not exist!";
                return;
            }
            meal = dbMeal;
            meal.Editing = true;
            btnText = "Update Meal";
        }
        loading = false;
    }

    void RemoveVariant(int mealTypeId)
    {
        var variant = meal.Variants.Find(v => v.MealTypeId == mealTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            meal.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    void AddVariant()
    {
        meal.Variants
            .Add(new MealVariant { IsNew = true, MealId = meal.Id });
    }

    async Task AddOrUpdateMeal()
    {
        try
        {
            isProcessing = true;

            if (meal.IsNew)
            {
                var result = await MealService.CreateMeal(meal);
                NavigationManager.NavigateTo($"admin/meal/{result.Id}");
            }
            else
            {
                meal.IsNew = false;
                meal = await MealService.UpdateMeal(meal);
                NavigationManager.NavigateTo($"admin/meal/{meal.Id}", true);
            }
        }
        catch (Exception ex)
        {
            // Hibakezelés, például logolás vagy felhasználó értesítése
            Console.WriteLine($"Hiba történt: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    async void DeleteMeal()
    {

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
         $"Valóban szeretnéd törölni '{meal.Name}'?");
        if (confirmed)
        {
            var deleteSucces = await MealService.DeleteMeal(meal);
            await JSRuntime.InvokeVoidAsync("alert", deleteSucces);


        }
    }
}